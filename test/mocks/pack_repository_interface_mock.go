// Code generated by MockGen. DO NOT EDIT.
// Source: C:\go-projects\gympack\pkg\infrastructure\database\mongodb\repository\pack\pack_repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=C:\go-projects\gympack\pkg\infrastructure\database\mongodb\repository\pack\pack_repository_interface.go -destination=C:\go-projects\gympack\test\mocks\pack_repository_interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "gympack/pkg/domain/model"
	filter "gympack/pkg/infrastructure/database/mongodb/repository/filter"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPackRepositoryInterface is a mock of PackRepositoryInterface interface.
type MockPackRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPackRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockPackRepositoryInterfaceMockRecorder is the mock recorder for MockPackRepositoryInterface.
type MockPackRepositoryInterfaceMockRecorder struct {
	mock *MockPackRepositoryInterface
}

// NewMockPackRepositoryInterface creates a new mock instance.
func NewMockPackRepositoryInterface(ctrl *gomock.Controller) *MockPackRepositoryInterface {
	mock := &MockPackRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPackRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackRepositoryInterface) EXPECT() *MockPackRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteOneByFilter mocks base method.
func (m *MockPackRepositoryInterface) DeleteOneByFilter(ctx context.Context, pFilter filter.BaseFilter) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneByFilter", ctx, pFilter)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOneByFilter indicates an expected call of DeleteOneByFilter.
func (mr *MockPackRepositoryInterfaceMockRecorder) DeleteOneByFilter(ctx, pFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneByFilter", reflect.TypeOf((*MockPackRepositoryInterface)(nil).DeleteOneByFilter), ctx, pFilter)
}

// DeleteOneById mocks base method.
func (m *MockPackRepositoryInterface) DeleteOneById(ctx context.Context, id string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", ctx, id)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOneById indicates an expected call of DeleteOneById.
func (mr *MockPackRepositoryInterfaceMockRecorder) DeleteOneById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockPackRepositoryInterface)(nil).DeleteOneById), ctx, id)
}

// FindByFilter mocks base method.
func (m *MockPackRepositoryInterface) FindByFilter(ctx context.Context, pFilter filter.BaseFilter, project []string) (*[]model.PackModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", ctx, pFilter, project)
	ret0, _ := ret[0].(*[]model.PackModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockPackRepositoryInterfaceMockRecorder) FindByFilter(ctx, pFilter, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockPackRepositoryInterface)(nil).FindByFilter), ctx, pFilter, project)
}

// FindOneByFilter mocks base method.
func (m *MockPackRepositoryInterface) FindOneByFilter(ctx context.Context, pFilter filter.BaseFilter, project []string) (*model.PackModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByFilter", ctx, pFilter, project)
	ret0, _ := ret[0].(*model.PackModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByFilter indicates an expected call of FindOneByFilter.
func (mr *MockPackRepositoryInterfaceMockRecorder) FindOneByFilter(ctx, pFilter, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByFilter", reflect.TypeOf((*MockPackRepositoryInterface)(nil).FindOneByFilter), ctx, pFilter, project)
}

// FindOneById mocks base method.
func (m *MockPackRepositoryInterface) FindOneById(ctx context.Context, id string, project []string) (*model.PackModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", ctx, id, project)
	ret0, _ := ret[0].(*model.PackModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockPackRepositoryInterfaceMockRecorder) FindOneById(ctx, id, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockPackRepositoryInterface)(nil).FindOneById), ctx, id, project)
}

// InsertOne mocks base method.
func (m *MockPackRepositoryInterface) InsertOne(ctx context.Context, pModel model.PackModel) (*model.PackModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, pModel)
	ret0, _ := ret[0].(*model.PackModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockPackRepositoryInterfaceMockRecorder) InsertOne(ctx, pModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockPackRepositoryInterface)(nil).InsertOne), ctx, pModel)
}

// IsValidMandatoryFilters mocks base method.
func (m *MockPackRepositoryInterface) IsValidMandatoryFilters(ctx context.Context, pFilter filter.BaseFilter, project []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidMandatoryFilters", ctx, pFilter, project)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidMandatoryFilters indicates an expected call of IsValidMandatoryFilters.
func (mr *MockPackRepositoryInterfaceMockRecorder) IsValidMandatoryFilters(ctx, pFilter, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidMandatoryFilters", reflect.TypeOf((*MockPackRepositoryInterface)(nil).IsValidMandatoryFilters), ctx, pFilter, project)
}

// UpdateOneByFilter mocks base method.
func (m *MockPackRepositoryInterface) UpdateOneByFilter(ctx context.Context, pFilter filter.BaseFilter, model model.PackModel) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneByFilter", ctx, pFilter, model)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneByFilter indicates an expected call of UpdateOneByFilter.
func (mr *MockPackRepositoryInterfaceMockRecorder) UpdateOneByFilter(ctx, pFilter, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneByFilter", reflect.TypeOf((*MockPackRepositoryInterface)(nil).UpdateOneByFilter), ctx, pFilter, model)
}

// UpdateOneById mocks base method.
func (m *MockPackRepositoryInterface) UpdateOneById(ctx context.Context, id string, model model.PackModel) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneById", ctx, id, model)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneById indicates an expected call of UpdateOneById.
func (mr *MockPackRepositoryInterfaceMockRecorder) UpdateOneById(ctx, id, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneById", reflect.TypeOf((*MockPackRepositoryInterface)(nil).UpdateOneById), ctx, id, model)
}
