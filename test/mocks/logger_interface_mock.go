// Code generated by MockGen. DO NOT EDIT.
// Source: C:\go-projects\gympack\pkg\shared\logger_interface.go
//
// Generated by this command:
//
//	mockgen -source=C:\go-projects\gympack\pkg\shared\logger_interface.go -destination=C:\go-projects\gympack\test\mocks\logger_interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
	isgomock struct{}
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerInterface) Debug(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerInterfaceMockRecorder) Debug(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerInterface)(nil).Debug), message)
}

// DebugFields mocks base method.
func (m *MockLoggerInterface) DebugFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DebugFields", fields, message)
}

// DebugFields indicates an expected call of DebugFields.
func (mr *MockLoggerInterfaceMockRecorder) DebugFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugFields", reflect.TypeOf((*MockLoggerInterface)(nil).DebugFields), fields, message)
}

// Error mocks base method.
func (m *MockLoggerInterface) Error(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", message)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerInterfaceMockRecorder) Error(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerInterface)(nil).Error), message)
}

// ErrorFields mocks base method.
func (m *MockLoggerInterface) ErrorFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorFields", fields, message)
}

// ErrorFields indicates an expected call of ErrorFields.
func (mr *MockLoggerInterfaceMockRecorder) ErrorFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorFields", reflect.TypeOf((*MockLoggerInterface)(nil).ErrorFields), fields, message)
}

// Fatal mocks base method.
func (m *MockLoggerInterface) Fatal(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", message)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerInterfaceMockRecorder) Fatal(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerInterface)(nil).Fatal), message)
}

// FatalFields mocks base method.
func (m *MockLoggerInterface) FatalFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FatalFields", fields, message)
}

// FatalFields indicates an expected call of FatalFields.
func (mr *MockLoggerInterfaceMockRecorder) FatalFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalFields", reflect.TypeOf((*MockLoggerInterface)(nil).FatalFields), fields, message)
}

// Info mocks base method.
func (m *MockLoggerInterface) Info(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerInterfaceMockRecorder) Info(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInterface)(nil).Info), message)
}

// InfoFields mocks base method.
func (m *MockLoggerInterface) InfoFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfoFields", fields, message)
}

// InfoFields indicates an expected call of InfoFields.
func (mr *MockLoggerInterfaceMockRecorder) InfoFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoFields", reflect.TypeOf((*MockLoggerInterface)(nil).InfoFields), fields, message)
}

// Panic mocks base method.
func (m *MockLoggerInterface) Panic(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", message)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerInterfaceMockRecorder) Panic(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLoggerInterface)(nil).Panic), message)
}

// PanicFields mocks base method.
func (m *MockLoggerInterface) PanicFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PanicFields", fields, message)
}

// PanicFields indicates an expected call of PanicFields.
func (mr *MockLoggerInterfaceMockRecorder) PanicFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PanicFields", reflect.TypeOf((*MockLoggerInterface)(nil).PanicFields), fields, message)
}

// Warn mocks base method.
func (m *MockLoggerInterface) Warn(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", message)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerInterfaceMockRecorder) Warn(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerInterface)(nil).Warn), message)
}

// WarnFields mocks base method.
func (m *MockLoggerInterface) WarnFields(fields map[string]any, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnFields", fields, message)
}

// WarnFields indicates an expected call of WarnFields.
func (mr *MockLoggerInterfaceMockRecorder) WarnFields(fields, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnFields", reflect.TypeOf((*MockLoggerInterface)(nil).WarnFields), fields, message)
}
